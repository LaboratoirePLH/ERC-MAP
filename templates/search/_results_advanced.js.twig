{% set headers = [] %}
{% set groups = {} %}
{% set hiddenCols = [] %}
{% set colIndex = 0 %}
{% for group, cols in columns %}
{% set groups = groups|merge({((group~'.name')|trans): (cols|length)}) %}
{% for col in cols %}
{% set headers = headers|merge([col.label|trans]) %}
{% if not col.visible %}
{% set hiddenCols = hiddenCols|merge([colIndex]) %}
{% endif %}
{% set colIndex = colIndex + 1 %}
{% endfor %}
{% endfor %}

<script type="text/javascript">
    var mode = "{{ mode }}";
    var columns = $.parseJSON("{{ columns|json_encode|e('js')|raw }}")
    var headers = $.parseJSON("{{ headers|json_encode|e('js')|raw }}")
    var groups = $.parseJSON("{{ groups|json_encode|e('js')|raw }}")
    var hiddenCols = $.parseJSON("{{ hiddenCols|json_encode|e('js')|raw }}");
    
    $(document).ready(function () {
    
        $('#search-results thead tr#filterRow th').each(function () {
            var title = $(this).text();
            var value = $(this).data('value');
            if (title != "") {
                $(this).html(
                    '<input type="text" class="w-100 form-control form-control-sm" placeholder="{{"generic.search"|trans}}' +
                    ' ' + title + '" />'
                );
                if (value != null) {
                    $(this).children('input').val(value);
                }
            }
        });
        var dt = $('#search-results').DataTable({
            scrollX: true,
            searching: true,
            ordering: true,
            order: [
                [headers.length - 1, 'asc'] // Order by the last column of the table (ID column)
            ],
            language: $.parseJSON('{{ "datatable.language"|trans|raw }}'),
            pageLength: 10,
            lengthMenu: [
                [
                    10, 25, 50, -1
                ],
                [
                    10, 25, 50, "{{'datatable.all'|trans}}"
                ]
            ],
            buttons: [{
                extend: 'csv',
                filename: "{{ 'app_name'|trans }}-{{ 'search.results'|trans }} {{ ('search.'~mode)|trans }}",
                text: "{{'generic.export_csv'|trans}}",
                customize: function (document, button, table) {
                    var papadata = Papa.parse(document);
                    var data = papadata.data;

                    // Set headers (default first line contains the search input)
                    data[0] = headers;

                    // Set Link header
                    const linkIndexes = headers.reduce((indexes, item, index) => {
                        if (item == "{{ 'generic.view'|trans }}") {
                            indexes.push(index);
                        }
                        return indexes;
                    }, []);

                    linkIndexes.forEach((idx) => { data[0][idx] = "{{ 'generic.link'|trans|raw }}"; });

                    // If we have more than one groupe, insert a new first row containing group names
                    var hasGroups = false;
                    if (Object.keys(groups).length > 1) {
                        const groupHeaders = Object.entries(groups).map(([label, size]) => Array(size).fill(label)).flat();
                        data.unshift(groupHeaders);
                        hasGroups = true;
                    }
                    data = data.map((row, index) => {
                        if (index > (hasGroups ? 1 : 0)) {
                            // Prepare Links
                            linkIndexes.forEach((linkIdx) => {
                                row[linkIdx] = $("<div />").html(row[linkIdx]).find("a").attr("href");
                            });

                            // Replace <br> and <hr> with CSV accepted fallback
                            row = row.map(v => v.replace(/<(br)[\s]*[\/]?>/gi, "\n").replace(/<(hr)[\s]*[\/]?>/gi, "\n-----\n"));
                        }
                        return row.map(col => $("<div/>").html(col).text());
                    });

                    // Now remove all hidden columns
                    data = data.map(row => row.filter((v, i) => table.column(i).visible()));

                    return Papa.unparse(data, {
                        quotes: true
                    });
                },
                exportOptions: {
                    stripHtml    : false,
                    stripNewlines: false,
                }
            }]
        });

        var updateCounter = function (data) {
            var total = data.recordsTotal,
                displayed = data.recordsDisplay,
                labelAll = "{{ 'search.results_count'|trans }}",
                labelFiltered = "{{ 'search.results_count_filtered'|trans }}",
                counter = $('#search-results-count'),
                str;

            if (total === displayed) {
                str = labelAll.replace(/%records%/g, total)
                    .replace(/%plural%/g, (total === 1 ? '' : 's'));
            }
            else {
                str = labelFiltered.replace(/%records%/g, displayed)
                    .replace(/%plural%/g, (displayed === 1 ? '' : 's'))
                    .replace(/%total%/g, total);
            }
            counter.text(str);
        };

        var storeVisibleColumns = function()
        {
            var cols = Array.from(dt.columns().visible());
            Cookie.set('search_'+mode+'_columns', JSON.stringify(cols), {expires: 365});
        };

        var loadVisibleColumns = function()
        {
            // Get cookie (if missing will return undefined)
            var cols = Cookie.get('search_'+mode+'_columns');
            if(cols !== undefined)
            {
                // Try to parse JSON form Cookie (throws Exception if failed)
                try {
                    cols = JSON.parse(cols);
                }
                catch (e) {
                    cols = null;
                }
            }
            // If we found valid data, display columns from user setting
            if(cols !== null && cols !== undefined){
                cols.forEach((visible, colIndex) => {
                    dt.column(colIndex).visible(visible);
                    $('input.toggle-column#checkboxColumn'+colIndex).prop('checked', visible);
                })
            }
            // Else display default settings
            else {
                hiddenCols.forEach(colIndex => { dt.column(colIndex).visible(false) })
            }
        };

        $('#search-results_wrapper select').removeClass('custom-select');
        dt.columns().every(function () {
            var me = this;
            $('input', this.header()).on('keyup change', function () {
                if (me.search() !== this.value) {
                    me.search(
                        // Remove accented characters from search string
                        jQuery.fn.DataTable.ext.type.search.string(removeAccents(this.value))
                    ).draw();
                    updateCounter(dt.page.info());
                }
            })
            $('input', this.header()).on('click', function (e) {
                e.stopPropagation();
            })
        });

        // Toggle column visibility
        $('input.toggle-column').on('change', function () {
            // Get the column API object
            var column = dt.column($(this).attr('data-column'));
            // Toggle the visibility
            column.visible(this.checked);
            // Update setting in cookie
            storeVisibleColumns();
        });
        // Prevent click on checkbox to propagate to dropdown-item (causing double change)
        $('input.toggle-column').on('click', function (e) {
            e.stopImmediatePropagation();
        });
        // Prevent checkboxes parent click to close the dropdown
        $('input.toggle-column').parent('.dropdown-item').on('click', function (e) {
            e.preventDefault();
            var cb = $(this).find('input').first();
            cb.get(0).checked = !cb.get(0).checked;
            cb.trigger('change');
            return false;
        });
        loadVisibleColumns();


        $('input[type=search]').on('keyup change', function () {
            dt.search(
                // Remove accented characters from search string
                jQuery.fn.DataTable.ext.type.search.string(removeAccents(this.value))
            ).draw();
            updateCounter(dt.page.info());
        })
        dt.buttons().container().appendTo('.table-buttons');
        $('.clear-filter-button').on('click', function (e) {
            e.preventDefault();
            dt.columns().every(function () {
                $('input', this.footer()).val("").trigger('change');
            });
        })
        updateCounter(dt.page.info());


        // Manage query save
        $('#query-save-modal form').on('submit', function (e) {
            e.preventDefault();
            const formData = $(this).serializeObject();
            var spinner = $(this).find('#submit-spinner');
            var results = $(this).find('#save-query-result');

            spinner.removeClass('d-none');

            results.removeClass('alert-success alert-danger');
            results.addClass('d-none');
            results.text('');

            $.post($(this).get(0).action, formData)
                .done(function (response) {
                    results.addClass('alert-success');
                    results.text(response.message);

                    setTimeout(() => { $('#query-save-modal').modal('hide') }, 2000);
                })
                .fail(function (response) {
                    results.addClass('alert-danger');
                    results.text(response.responseJSON.message);
                })
                .always(function () {
                    results.removeClass('d-none');
                    spinner.addClass('d-none');
                });
        })
    });
</script>