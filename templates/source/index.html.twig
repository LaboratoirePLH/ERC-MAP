{% extends 'list_page.html.twig' %}

{% set action = action|default('list') %}
{% set title = title|default('source.'~action) %}
{% block title %}
{{ title|trans }}
{% endblock %}
{% block content %}
{% if action == 'list' %}
<div class="row">
    <div class="col-12 table-buttons">
        {% if is_granted('ROLE_CONTRIBUTOR') %}
        <a href=" {{ url('source_create') }}" class="btn btn-primary">{{ 'source.create'|trans }}</a>
        {% endif %}
        <button type="button" class="btn btn-warning clear-filter-button">
            {{ 'generic.clear_filters'|trans }}
        </button>
        {% include 'partials/_help.html.twig' with {'section': 'source_list'} %}
    </div>
</div>
{% endif %}
<table class="table table-striped table-hover table-bordered w-100 text-center list_table" id="source_list">
    <thead>
        <tr>
            <th scope="col">
                {{ 'generic.fields.id'|trans }}
            </th>
            <th scope="col">
                {{ 'generic.fields.categorie'|trans }}
            </th>
            <th scope="col">
                {{ 'generic.fields.types'|trans }}
            </th>
            <th scope="col">
                {{ 'source.fields.langues'|trans }}
            </th>
            <th scope="col">
                {{ 'source.fields.origine'|trans }}
            </th>
            <th scope="col">
                {{ 'generic.fields.datation'|trans }}
            </th>
            <th scope="col">
                {{ 'source.fields.edition'|trans }}
            </th>
            <th scope="col">
                {{ 'source.fields.source_biblio'|trans }}
            </th>
            <th scope="col">
                {{ 'generic.fields.cree'|trans }}
            </th>
            <th scope="col">
                {{ 'generic.fields.modifie'|trans }}
            </th>
            <th scope="col">
                {{ 'generic.fields.to_translate'|trans }}
            </th>
            <th scope="col">
                {{ 'generic.actions'|trans }}
            </th>
        </tr>
    </thead>
    <tbody></tbody>
    <tfoot>
        <tr>
            <th>{{ 'generic.fields.id'|trans }}</th>
            <th>{{ 'generic.fields.categorie'|trans }}</th>
            <th>{{ 'generic.fields.type'|trans }}</th>
            <th>{{ 'source.fields.langues'|trans }}</th>
            <th>{{ 'source.fields.origine'|trans }}</th>
            <th>{{ 'generic.fields.datation'|trans }}</th>
            <th>{{ 'source.fields.edition'|trans }}</th>
            <th>{{ 'source.fields.source_biblio'|trans }}</th>
            <th data-value="{{ is_granted('ROLE_CONTRIBUTOR') ? app.user.getInitials() : '' }}">{{
                'generic.fields.cree'|trans }}</th>
            <th>{{ 'generic.fields.modifie'|trans }}</th>
            <th>{{ 'generic.fields.to_translate'|trans }}</th>
            <th></th>
        </tr>
    </tfoot>
</table>
{% if action == 'list' %}
<div class="row">
    <div class="col-12 table-buttons">
        {% if is_granted('ROLE_CONTRIBUTOR') %}
        <a href=" {{ url('source_create') }}" class="btn btn-primary">{{ 'source.create'|trans }}</a>
        {% endif %}
        <button type="button" class="btn btn-warning clear-filter-button">
            {{ 'generic.clear_filters'|trans }}
        </button>
    </div>
</div>
{% endif %}
{% include "modals/confirmation.html.twig" with {
'modalName': 'confirm_deletion',
'uuid': 'confirm-deletion-modal',
'targetUrl': url('source_delete', {'id' : '__ID__'}),
'confirmationLabel': 'generic.delete',
'csrfToken': 'delete_source',
} %}
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script type="text/javascript">
    $(document).ready(function () {

        var action = "{{ action }}";

        // Store Element ID in variable
        const elementId = "{{ element is defined ? element : '' }}";

        // Prepare AJAX URL depending on filters
        var ajax = {
            url: "{{ url('json_source_list') }}",
            type: "GET"
        };
        if (elementId !== "") {
            ajax.data = {
                filter: "element:" + elementId
            };
        }

        // Routes
        var selectionRoute = "{{ action == 'select' ? (cloneFrom is defined ? url(selectionRoute, {'source_id': '__ID__', 'cloneFrom': cloneFrom}) : url(selectionRoute, {'source_id': '__ID__'})) : '' }}";
        var attestationsRoute = "{{ url('attestation_source', {'source_id': '__ID__'}) }}";
        var showRoute = "{{ url('source_show', {'id': '__ID__'}) }}";
        var editRoute = "{{ url('source_edit', {'id': '__ID__'}) }}";
        var deleteRoute = "{{ url('source_delete', {'id': '__ID__'}) }}";
        var cloneRoute = "{{ url('source_create', {'cloneFrom': '__ID__'}) }}";

        // Error message for locks
        var lockError = "{{ 'generic.messages.error_locked'|trans({'%type%': 'source.name'|trans}) }}";

        // Role management
        var isContributor = "{{ is_granted('ROLE_CONTRIBUTOR') ? 1 : 0 }}" === "1";
        var isModerator = "{{ is_granted('ROLE_MODERATOR') ? 1 : 0 }}" === "1";
        var isAdmin = "{{ is_granted('ROLE_ADMIN') ? 1 : 0 }}" === "1";
        var currentUser = parseInt("{{ app.user.id|default(-1) }}", 10);

        const tableOptions = {
            ajax: ajax,
            columns: [
                {
                    responsivePriority: 1,
                    data: 'id',
                    render: function (data, type, row) {
                        if (type === 'filter') {
                            return row.projet + ' #' + data;
                        }
                        if (type === 'sort' || type === 'type') {
                            return data;
                        }
                        return row.projet + '<br/>#' + data + ' <small>(v' + (
                            row.version || '?'
                        ) + ')</small>';
                    }
                },
                {
                    data: 'categorie'
                },
                {
                    data: 'types',
                    render: function (data, type, row) {
                        if (type === 'display') {
                            return data.join('<br/>');
                        }
                        return data.join(' ');
                    }
                },
                {
                    data: 'langues',
                    render: function (data, type, row) {
                        if (type === 'display') {
                            return data.join('<br/>');
                        }
                        return data.join(' ');
                    }
                }, {
                    data: 'region'
                }, {
                    data: 'datation',
                    render: function (data, type, row) {
                        if (type === 'sort' && data !== '') {
                            return data.split('/').map(d => d.trim()).map(d => d == '?' ? null : parseInt(d, 10)).filter(d => d !== null).shift();
                        }
                        return data;
                    }
                }, {
                    data: 'titre_abrege'
                }, {
                    data: 'reference'
                },
                $.fn.datatablesTemplateColumn('date_creation', isContributor),
                $.fn.datatablesTemplateColumn('date_modification', isContributor), {
                    data: 'traduire',
                    visible: isContributor,
                    render: function (data, type, row) {
                        return data.join('<br/>');
                    }
                }, {
                    data: null,
                    searchable: false,
                    orderable: false,
                    width: 110,
                    responsivePriority: 1,
                    render: function (data, type, row) {
                        var verrou = false;
                        var buttons = [];
                        if (row.verrou !== false) {
                            let texteVerrou = lockError.replace('%id%', row.id).replace('%user%', row.verrou.createur).replace('%time%', row.verrou.date_fin);
                            texteVerrou = $('<div>').html(texteVerrou).text();
                            verrou = $.fn.createListButton('button', 'danger', 'lock', "{{ 'generic.locked'|trans }}");
                            verrou.attr('data-toggle', 'tooltip').attr('data-placement', 'left').attr('title', texteVerrou).addClass('disabled');
                        }
                        if (action == "select") {
                            if (verrou === false) {
                                buttons.push($.fn.createListButton('a', 'success', 'check', "{{ 'generic.choose'|trans }}", selectionRoute.replace('__ID__', row.id)));
                            } else {
                                buttons.push(verrou);
                            }
                        } else {
                            buttons.push($.fn.createListButton('a', 'success', '{{ icons.attestation }}'.replace('fa-', ''), "{{ 'source.sections.attestations'|trans }}", attestationsRoute.replace('__ID__', row.id)));
                            buttons.push($.fn.createListButton('a', 'primary', 'eye', "{{ 'generic.view'|trans }}", showRoute.replace('__ID__', row.id)));
                            if (verrou === false) {
                                if (isModerator || row.createur_id === currentUser) {
                                    buttons.push($.fn.createListButton('a', 'warning', 'edit', "{{ 'generic.edit'|trans }}", editRoute.replace('__ID__', row.id)));
                                }
                                if (isAdmin || row.createur_id === currentUser) {
                                    buttons.push($.fn.createDeleteButton("{{ 'generic.delete'|trans }}", row.id));
                                }
                            } else {
                                buttons.push(verrou);
                            }
                            //
                            if (isContributor) {
                                buttons.push($.fn.createListButton('a', 'secondary', 'copy', "{{ 'generic.clone'|trans }}", cloneRoute.replace('__ID__', row.id)));
                            }
                        }
                        return buttons.map(btn => btn[0].outerHTML).join("\n");
                    }
                }
            ],
            order: [
                [
                    isContributor ? 9 : 0,
                    'desc'
                ]
            ],
            language: $.parseJSON('{{ "datatable.language"|trans|raw }}'),
            pageLength: 10,
            lengthMenu: [
                [
                    10, 25, 50, -1
                ],
                [
                    10, 25, 50, "{{ 'datatable.all'|trans }}"
                ]
            ],
            buttons: [
                {
                    extend: 'csv',
                    filename: "{{ 'app_name'|trans }}-{{ 'source.list'|trans }}",
                    text: "{{ 'generic.export_csv'|trans }}",
                    customize: function (document) {
                        return document.replace(/(\s)\s+/g, "$1");
                    },
                    exportOptions: {
                        columns: [
                            0,
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10
                        ]
                    }
                }
            ]
        };
        $.fn.setupList('source_list', tableOptions, "{{ 'generic.search'|trans }}");
    });
</script>
{% endblock %}